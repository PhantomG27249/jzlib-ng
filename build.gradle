plugins {
    id 'java'
    id 'c'
}

group 'io.github.duplexsystem'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()

}

dependencies {
    implementation 'org.threadly:threadly:6.6'
}

task compileHeaders() {
    doLast {
        exec {
            workingDir 'src/main/java'

            commandLine 'javac', '-h', '../../jzlibng/c', 'io/github/duplexsystem/jzlibng/Interface.java', '-d', '/tmp', '-XDignore.symbol.file', '--add-exports', 'java.base/jdk.internal.vm.annotation=ALL-UNNAMED'
        }
    }
}

task resetZlibNG() {
    dependsOn compileHeaders
    doLast {
        exec {
            workingDir 'zlib-ng'

            commandLine 'git', 'reset', '--hard', 'origin/stable'
        }
    }
}

task patchZlibNG() {
    dependsOn resetZlibNG
    doLast {
        exec {
            workingDir 'zlib-ng'

            commandLine 'git', 'apply', '--ignore-whitespace', '../zlib-ng-patches/0001-jzlib-ng-changes.patch'
        }
    }
}

task configZlibNG() {
    dependsOn patchZlibNG
    doLast {
        exec {
            workingDir 'zlib-ng'

            commandLine 'cmake', '.', '-DZLIB_COMPAT=true', '-DZLIB_ENABLE_TESTS=false'
        }
    }
}

task buildZlibNG() {
    dependsOn configZlibNG
    doLast {
        exec {
            workingDir 'zlib-ng'

            commandLine 'cmake', '--build', '.', '--config', 'Release'
        }
    }
}

task copyZlibNG() {
    dependsOn buildZlibNG
    doLast {
        copy {
            from 'zlib-ng/bin'
            into 'src/main/resources/native'
        }
    }
}

task resetCPUFeatures() {
    dependsOn compileHeaders
    doLast {
        exec {
            workingDir 'cpu-features'

            commandLine 'git', 'reset', '--hard', 'origin/master'
        }
    }
}

task patchCPUFeatures() {
    dependsOn resetCPUFeatures
    doLast {
        exec {
            workingDir 'cpu-features'

            commandLine 'git', 'apply', '--ignore-whitespace', '../cpu-features-patches/0001-jzlib-ng-changes.patch'
        }
    }
}

task configCPUFeatures() {
    dependsOn patchCPUFeatures
    doLast {
        exec {
            workingDir 'cpu-features'

            commandLine 'cmake', '.', '-DCMAKE_BUILD_TYPE=Release', '-DBUILD_TESTING=OFF', '-DBUILD_SHARED_LIBS=ON'
        }
    }
}

task buildCPUFeatures() {
    dependsOn configCPUFeatures
    doLast {
        exec {
            workingDir 'cpu-features'

            commandLine 'cmake', '--build', '.', '--config', 'Release'
        }
    }
}

task copyCPUFeatures() {
    dependsOn buildCPUFeatures
    doLast {
        copy {
            from 'cpu-features/bin'
            into 'src/main/resources/native'
        }
    }
}

model {
    platforms {
        x64 {
            architecture "x64"
        }
    }

    components {
        jzlibng(NativeLibrarySpec) {
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-I', "${project.rootDir.toString()}/zlib-ng"
                    cCompiler.args '-I', "${project.rootDir.toString()}/cpu-features/include"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-I', "${project.rootDir.toString()}/zlib-ng"
                    cCompiler.args '-I', "${project.rootDir.toString()}/cpu-features/include"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64 -fomit-frame-pointer -O2'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    cCompiler.args '-I', "${project.rootDir.toString()}/zlib-ng"
                    cCompiler.args '-I', "${project.rootDir.toString()}/cpu-features/include"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                    cCompiler.args '-I', "${project.rootDir.toString()}/zlib-ng"
                    cCompiler.args '-I', "${project.rootDir.toString()}/cpu-features/include"
                }
            }
        }
    }
}

processResources.dependsOn 'copyCPUFeatures'
processResources.dependsOn 'copyZlibNG'
copyZlibNG.dependsOn 'jzlibngSharedLibrary'
copyZlibNG.doLast{
    copy {
        from 'build/libs/jzlibng/shared'
        into 'src/main/resources/native'
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(new ArrayList<String>((
            Arrays.asList("--add-exports", "java.base/jdk.internal.vm.annotation=ALL-UNNAMED"))))
}